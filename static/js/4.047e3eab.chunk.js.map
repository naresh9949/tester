{"version":3,"sources":["components/RabbitMq/Button.js","components/RabbitMq/RabbitMqTable.js","components/Breadcrumbs.js","images/error.jpeg","components/ErrorComponent.js","components/RabbitMq/RabbitMQ.js"],"names":["useStyles","makeStyles","root","width","ActiveButton","props","classes","useState","loading","setLoading","state","setState","listeners","data","idx","name","setName","handleError","useErrorHandler","LoadingButton","className","onClick","console","log","ActionURL","axios","post","then","res","listener","Body","Listeners","action","getNewName","catch","err","loadingIndicator","variant","StyledTableCell","styled","TableCell","theme","tableCellClasses","head","backgroundColor","color","fontSize","body","RabbitMQ","window","innerWidth","setWidth","setData","getButtonText","ConnectionStatus","useEffect","addEventListener","get","Container","Paper","sx","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","align","TableBody","map","row","border","component","scope","ListenerName","QueueName","Application","ConnectionType","IsPrimaryConnection","IsActive","BreadcrumbsComponent","navigate","useNavigate","search","useLocation","id","URLSearchParams","pid","isReffered","referrer","Initial_Breadcrumbs","BreadCrumbs","HomeURL","BackButtonURL","current_screen","BreadCrumbName","cur_screen","BreadCrumbURL","push","breadcrumbs","setBreadcrumbs","toString","Header","IsSuccess","style","padding","paddingTop","Breadcrumbs","separator","Button","startIcon","size","Link","underline","display","alignItems","href","mr","breadcrub","index","length","textDecoration","ErrorComponent","src","image","height","alt","ErrorHandler","errinfo","RabbitMqTable","Fragment","FallbackComponent","onError"],"mappings":"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","file":"static/js/4.047e3eab.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { makeStyles } from '@mui/styles';\nimport axios from 'axios';\nimport { useErrorHandler } from \"react-error-boundary\";\n\nconst useStyles = makeStyles({\n  root: {\n    width:120,\n  },\n});\nconst getNewName = (name) => {\n    if(name===\"Activate\")\n    return \"Deactivate\";\n    else\n    return \"Activate\";\n}\n\nexport default function ActiveButton(props) {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  const [state, setState] = useState(props.state);\n  const listeners = props.data;\n  const idx = props.idx;\n  const [name, setName] = useState(props.name);\n  const handleError = useErrorHandler();\n\n  function ActivateDeactivate() {\n    setLoading(true);\n\n    // activate or deactive the listner\n    console.log(\"Working fine\")\n    console.log(listeners[idx].ActionURL);\n    axios.post(listeners[idx].ActionURL)\n    .then((res)=>{\n      const listener = res.data.Body.Listeners[0];\n      listeners[idx] = listener;\n    // changing the state of button\n    setState(!state);\n\n    //updating the listeners with out fetching all listeners that we have\n    props.action([...listeners])\n    setName(getNewName(name))\n    setLoading(false);\n\n    }).catch(err=>{\n      console.log(err);\n      handleError(err);\n    })\n  }\n\n  return (\n      <LoadingButton className={classes.root}\n        onClick={ActivateDeactivate}\n        loading={loading}\n        loadingIndicator=\"Loading...\"\n        variant=\"outlined\"\n      >\n          {name}\n      </LoadingButton>\n  );\n}\n","import * as React from \"react\";\nimport { useState,useEffect } from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Container from \"@mui/material/Container\";\nimport Paper from \"@mui/material/Paper\";\nimport { tableCellClasses } from \"@mui/material/TableCell\";\nimport styled from \"styled-components\";\nimport axios from 'axios';\nimport ActivateButton from \"./Button\";\nimport { useErrorHandler } from \"react-error-boundary\";\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: \"black\",\n    color: \"white\",\n    fontSize: 16,\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 44,\n  },\n}));\n\n\nconst RabbitMQ = () => {\n  const [width,setWidth] = useState(window.innerWidth);\n  const handleError = useErrorHandler();\n  const breakpoint = 620;\n\n  //console.log(width);\n\n  var idx = -1;\n  const [data, setData] = useState([]);\n\n  const getConnectionType = (ConnectionType) => {\n    if (ConnectionType === true) return \"Primary\";\n    else return \"Secondary\";\n  };\n\n  const getConnectionStatus = (ConnectionStatus) => {\n    if (ConnectionStatus === true) return \"Active\";\n    else return \"Inactive\";\n  };\n\n  const getButtonText = (ConnectionStatus) => {\n    if (ConnectionStatus === true) return \"Deactivate\";\n    else return \"Activate\";\n  };\n\n  const getIndex = () => {\n    idx++;\n    return idx;\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\n    axios.get('https://staging-prutils.systempr.com/api/RabbitMQConnectionAPI/GetAllListeners')\n    .then((res) => {\n      const listeners = res.data.Body.Listeners;\n      setData(listeners)\n    }).catch(err=>{\n      handleError(err);\n    })\n  },[handleError]);\n  return (\n    <Container>\n    <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n    <TableContainer sx={{maxHeight:500}}>\n      <Table stickyHeader aria-label=\"table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell align=\"center\">Listner</StyledTableCell>\n            <StyledTableCell align=\"center\">Queue</StyledTableCell>\n            <StyledTableCell align=\"center\">Application</StyledTableCell>\n            {width > breakpoint && <StyledTableCell align=\"center\">Connection Type</StyledTableCell>}\n            <StyledTableCell align=\"center\">Connection Status</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map((row) => (\n            <TableRow\n              key={row.ListenerName}\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell align=\"center\" component=\"th\" scope=\"row\">\n              {row.ListenerName}\n              </TableCell>\n              <TableCell align=\"center\">{row.QueueName}</TableCell>\n              <TableCell align=\"center\">{row.Application}</TableCell>\n              {width > breakpoint && <TableCell align=\"center\">\n                  {getConnectionType(row.IsPrimaryConnection)}\n                </TableCell>}\n              \n\n              <TableCell align=\"center\">\n                {getConnectionStatus(row.IsActive)}\n              </TableCell>\n              <TableCell align=\"center\">\n                <ActivateButton\n                  state={row.IsActive}\n                  name={getButtonText(row.IsActive)}\n                  data={data}\n                  idx={getIndex()}\n                  action={setData}\n                ></ActivateButton>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    </Paper>\n    </Container>\n  );\n};\n\nexport default RabbitMQ;\n\n","import * as React from \"react\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport { useState, useEffect } from \"react\";\nimport Link from \"@mui/material/Link\";\nimport axios from \"axios\";\nimport Button from \"@mui/material/Button\";\nimport HomeIcon from \"@mui/icons-material/Home\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nexport default function BreadcrumbsComponent(props) {\n  const navigate = useNavigate();\n  const search = useLocation().search;\n  const id = new URLSearchParams(search).get(\"pid\")\n    ? new URLSearchParams(search).get(\"id\")\n    : 0;\n  const pid = new URLSearchParams(search).get(\"pid\")\n    ? new URLSearchParams(search).get(\"pid\")\n    : 0;\n  const fname = new URLSearchParams(search).get(\"fname\")\n    ? new URLSearchParams(search).get(\"fname\")\n    : \"none\";\n  const isReffered = new URLSearchParams(search).get(\"isReffered\")\n    ? new URLSearchParams(search).get(\"isReffered\")\n    : false;\n  const referrer = new URLSearchParams(search).get(\"referrer\")\n    ? new URLSearchParams(search).get(\"referrer\")\n    : \"none\";\n  const domain = \".com\";\n  //pid=95&fname=User+WorkZone&isReffered=false&referrer=https://staging-wms.systempr.com\n  //http://localhost:3000/UserWorkZone?id=4567&pid=56788&fname=User+WorkZone&isReffered=false&referrer=https://staging-wms.systempr.com\n\n  // object for initial rendring of component\n  const Initial_Breadcrumbs = {\n    BreadCrumbs: [],\n    HomeURL: \"/\",\n    BackButtonURL: \"\",\n  };\n  const current_screen = { BreadCrumbName:props.cur_screen,BreadCrumbURL:'#'}\n  Initial_Breadcrumbs.BreadCrumbs.push(current_screen);\n  const [breadcrumbs, setBreadcrumbs] = useState(Initial_Breadcrumbs);\n  useEffect(() => {\n    // Fetching the breadcrumbs data from the API end point and storing that into local breadcrumbs\n    axios\n      .get(\n        \"https://staging-prutils.systempr.com/api/BreadCrumbsAPI/GetBreadCrumbs?id=\" +\n          id.toString() +\n          \"&pid=\" +\n          pid.toString() +\n          \"&referrer=\" +\n          referrer.toString() +\n          \"&IsReffered=\" +\n          isReffered.toString() +\n          \"&domain=\" +\n          domain.toString()\n      )\n      .then((res) => {\n        if (res.data.Header.IsSuccess) {\n          const BreadCrumbs = res.data.Body;\n          setBreadcrumbs(BreadCrumbs);\n        }\n      })\n      .catch((err) => {\n        console.log(\"Breadcrumbs ERROR\");\n      });\n  }, []);\n  return (\n    <div style={{ padding: 8, paddingTop: 0 }}>\n      <Breadcrumbs\n        aria-label=\"breadcrumb\"\n        separator=\"››\"\n        sx={{ width: \"100%\", overflow: \"hidden\" }}\n      >\n        <Button\n          variant=\"contained\"\n          key=\"back\"\n          onClick={() => navigate(-1)}\n          startIcon={<ArrowBackIcon />}\n          size=\"small\"\n        >\n          back\n        </Button>\n\n        <Link\n          key=\"home\"\n          underline=\"hover\"\n          sx={{ display: \"flex\", alignItems: \"center\" }}\n          color=\"#588EE7\"\n          href={breadcrumbs.HomeURL}\n        >\n          <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n          Home\n        </Link>\n\n        {breadcrumbs.BreadCrumbs.map((breadcrub, index) =>\n          // render with links if breadcrub is not the last one else render without link field\n          index !== breadcrumbs.BreadCrumbs.length - 1 ? (\n            <Link\n              key={breadcrub.BreadCrumbName}\n              underline=\"hover\"\n              color=\"#588EE7\"\n              href={breadcrub.BreadCrumbURL}\n            >\n              {breadcrub.BreadCrumbName}\n            </Link>\n          ) : (\n            <Link color=\"inherit\" key=\"cur_screen\" sx={{ textDecoration: \"none\" }}>\n              {breadcrub.BreadCrumbName}\n            </Link>\n          )\n        )}\n      </Breadcrumbs>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/error.a9f72bb4.jpeg\";","import React from 'react';\nimport image from './../images/error.jpeg';\nimport { Container } from \"@mui/material\";\n\nfunction ErrorComponent() {\n    //const image = \"https://thumbs.dreamstime.com/b/system-error-concept-people-stand-near-open-browser-tab-modern-flat-vector-illustration-184024877.jpg\";\n    return (\n        <Container sx={{}} align=\"center\">\n            <img src={image} height=\"60%\" width=\"60%\" alt=\"some thing went wrong\"/>\n            <h3>OOPS! something went wrong</h3>\n        </Container>\n    )\n}\n\nexport default ErrorComponent\n","import React from \"react\";\nimport RabbitMQTable from \"./RabbitMqTable\";\nimport BasicBreadcrumbs from \"./../Breadcrumbs\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport ErrorComponent from \"./../ErrorComponent\";\n\n  const ErrorHandler = (err,errinfo)=>{\n    console.log(err,errinfo);\n  }\nfunction RabbitMqTable() {\n  return (\n    <React.Fragment>\n      <BasicBreadcrumbs cur_screen=\"RabbitMQ Listeners\"/>\n      <ErrorBoundary FallbackComponent={ErrorComponent} onError={ErrorHandler}>\n      <RabbitMQTable/>\n      </ErrorBoundary>\n    </React.Fragment>\n  );\n}\n\nexport default RabbitMqTable;\n"],"sourceRoot":""}