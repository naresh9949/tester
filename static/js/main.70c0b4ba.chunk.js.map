{"version":3,"sources":["components/Spinner.js","components/Logscreen.js","components/NavBar.js","App.js","index.js","components/storageHandler.js"],"names":["Spinner","Container","align","sx","paddingTop","CircularProgress","color","Transition","React","props","ref","Slide","direction","NotificationRow","open","setOpen","data","status","header","IsSuccess","Error","handleTooltipClose","handleCopy","text","JSON","stringify","navigator","clipboard","writeText","Alert","severity","action","ClickAwayListener","onClickAway","Tooltip","PopperProps","disablePortal","onClose","disableFocusListener","disableHoverListener","disableTouchListener","title","Button","onClick","size","AlertTitle","EventID","date","Notifications","map","log","Logscreen","Logs","getLogs","console","handleClose","IconButton","component","Dialog","fullScreen","TransitionComponent","AppBar","position","Toolbar","edge","Typography","ml","flex","variant","Stack","width","spacing","ButtonAppBar","window","location","pathname","Box","flexGrow","marginLeft","sm","m","RabbitMQ","lazy","App","className","fallback","path","element","ReactDOM","render","StrictMode","document","getElementById","storage","localStorage","module","exports","setLog","storeArray","getItem","parse","itm","push","length","splice","setItem","e","name"],"mappings":"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","file":"static/js/main.70c0b4ba.chunk.js","sourcesContent":["import React from 'react';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { Container } from \"@mui/material\";\n\nfunction Spinner() {\n    return (\n        <Container align=\"center\" sx={{paddingTop:'20%'}}>\n        <CircularProgress color=\"success\"/>\n        </Container>\n    )\n}\n\nexport default Spinner\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Slide from \"@mui/material/Slide\";\nimport ReportGmailerrorredIcon from \"@mui/icons-material/ReportGmailerrorred\";\nimport { Container } from \"@mui/material\";\nimport Alert from \"@mui/material/Alert\";\nimport AlertTitle from \"@mui/material/AlertTitle\";\nimport Stack from \"@mui/material/Stack\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\nimport {setLog,getLogs} from './storageHandler';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst NotificationRow = (props) => {\n  const [open, setOpen] = React.useState(false);\n  const data = props.data;\n  const status = data.header.IsSuccess? \"success\" :data.header.Error? \"error\" : \"warning\";\n\n  const handleTooltipClose = () => {\n    setOpen(false);\n  };\n\n  const handleTooltipOpen = () => {\n    handleCopy();\n    setOpen(true);\n  };\n\n  const handleCopy = () => {\n    const text = JSON.stringify(data);\n    navigator.clipboard.writeText(text);\n  };\n  return (\n    <Alert\n      severity={status}\n      action={\n        <ClickAwayListener onClickAway={handleTooltipClose}>\n          <div>\n            <Tooltip\n              PopperProps={{\n                disablePortal: true,\n              }}\n              onClose={handleTooltipClose}\n              open={open}\n              disableFocusListener\n              disableHoverListener\n              disableTouchListener\n              title=\"The Log data has been copied to your clipboard.\"\n            >\n              <Button color=\"inherit\" onClick={handleTooltipOpen} size=\"small\">\n                <ContentCopyIcon />\n              </Button>\n            </Tooltip>\n          </div>\n        </ClickAwayListener>\n      }\n    >\n      <AlertTitle>{data.header.EventID}</AlertTitle>\n      {data.date}\n    </Alert>\n  );\n};\n\nconst Notifications = (props) => {\n    return(\n        <React.Fragment>\n          {props.data.map((log)=>{\n            return <NotificationRow status=\"error\" data={log}/>\n          })}\n           \n        </React.Fragment>\n    )\n}\n\n\n\n\n\n\nexport default function Logscreen() {\n  const [open, setOpen] = React.useState(false);\n  const Logs = getLogs();\n  console.log(Logs)\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n\n\n  return (\n    <div>\n      <IconButton\n        color=\"primary\"\n        onClick={handleClickOpen}\n        aria-label=\"upload picture\"\n        component=\"span\"\n      >\n        <ReportGmailerrorredIcon sx={{ color: \"white\" }} />\n      </IconButton>\n      <Dialog\n        fullScreen\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={Transition}\n      >\n        <AppBar sx={{ position: \"relative\" }}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={handleClose}\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\" component=\"div\">\n              Log Reports\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Container sx={{ paddingTop: 2 }}>\n          <Stack sx={{ width: \"100%\" }} spacing={2}>\n            <Notifications data={Logs}/>\n          </Stack>\n        </Container>\n      </Dialog>\n    </div>\n  );\n}\n\n\n","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Logscreen from './Logscreen';\n\n\nexport default function ButtonAppBar(props) {\n  const curpath = window.location.pathname;\n  var title=\"Home\";\n  switch(curpath){\n    case \"/\":title=\"Home\"\n              break;\n    case \"/rabbitMq\":title=\"Rabbit MQ Listeners\"\n              break;\n    case \"/work-order-maintanance\":title=\"Work Order Maintanance\"\n              break;\n    case \"/UserWorkZone\":title=\"User WorkZone\"\n              break;\n    default:title=\"Home\";\n  }\n  return (\n    <Box sx={{ flexGrow: 1}}>\n      <AppBar position=\"sticky\">\n        <Toolbar align=\"center\">\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1,marginLeft:{sm:32}}}>\n          {title}\n          </Typography>\n          <Typography variant=\"subtitle2\"  component=\"div\">\n          Logged in as knaresh\n          </Typography>\n          <Box sx={{ m: 1 }}/>\n          <Button color=\"inherit\" variant=\"outlined\">Logout</Button>\n          <Logscreen/>\n        </Toolbar>\n      </AppBar>\n      <Box sx={{ m: 1 }}/>\n    </Box>\n  );\n}\n","import React,{ Suspense } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Spinner from './components/Spinner';\nimport NavBar from \"./components/NavBar\";\n\nconst RabbitMQ = React.lazy(() => import('./components/RabbitMq/RabbitMQ'));\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar/>\n      <Suspense fallback={<Spinner/>}>\n      <BrowserRouter>\n        <Routes>\n          \n          <Route path=\"/rabbitMq\" element={<RabbitMQ/>} /> \n         \n           \n        </Routes>\n      </BrowserRouter>\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","const storage = window.localStorage;\n//{}\nconst setLog = (data) => {\n    var storeArray = [];\n    if (!storage.getItem(\"log\")) {\n        storeArray.push(data);\n        storage.setItem(\"log\", JSON.stringify(storeArray));\n      } else {\n        try {\n          JSON.parse(storage.getItem(\"log\")).map((itm) => storeArray.push(itm));\n          storeArray.push(data);\n          if (storeArray.length < 100) {\n            localStorage.setItem(\"log\", JSON.stringify(storeArray));\n          } else {\n            data.splice(0, 1);\n\n            localStorage.setItem(\"log\", JSON.stringify(storeArray));\n            //console.log(arr);\n          }\n        } catch (e) {\n          if (\n            e.name === \"QuotaExceededError\" ||\n            e.name === \"QUOTA_EXCEEDED_ERR\" ||\n            e.name === \"NS_ERROR_DOM_QUOTA_REACHED\"\n          ) {\n            data.splice(0, 1);\n\n            localStorage.setItem(\"log\", JSON.stringify(storeArray));\n            //console.log(arr);\n          }\n        }\n      }\n}\n\n\nconst getLogs = () => {\n  var storeArray = [];\n    if (localStorage?.getItem(\"log\") !== \"\") {\n        JSON.parse(localStorage.getItem(\"log\"))?.map((itm) =>\n          storeArray.push(itm)\n        );\n      }\n      return storeArray;\n}\n\n\nmodule.exports = {setLog,getLogs}"],"sourceRoot":""}